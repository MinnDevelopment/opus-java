import java.time.Duration

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'

    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
}

group = 'club.minnced'
project.version = '1.1.1'

def getProjectProperty(String name) { return project.properties.getOrDefault(name, null) }

def generatePom(Object pom, String packaging) {
    pom.packaging = packaging
    pom.name.set(project.name)
    pom.description.set("Modular java binding for opus natives.")
    pom.url.set("https://github.com/discord-java/opus-java")
    pom.scm {
        url.set("https://github.com/discord-java/opus-java")
        connection.set("scm:git:git://github.com/discord-java/opus-java")
        developerConnection.set("scm:git:ssh:git@github.com:discord-java/opus-java")
    }
    pom.licenses {
        license {
            name.set("The Apache Software License, Version 2.0")
            url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
            distribution.set("repo")
        }
    }
    pom.developers {
        developer {
            id.set("Minn")
            name.set("Florian Spie√ü")
            email.set("business@minn.dev")
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    group = 'club.minnced'
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

    ext.canSign = "signing.keyId" in properties

    task signModule(type: Sign) {
        sign(file("${buildDir}/publications/Release/module.json"))
    }

    task signPom(type: Sign) {
        sign(file("${buildDir}/publications/Release/pom-default.xml"))
    }
}

dependencies {
    api project(':api')
    api project(':natives')
}


publishing {
    publications {
        Release(MavenPublication) {
            from components.java

            groupId project.group
            artifactId project.name
            version version

            generatePom(pom, "jar")
        }
    }
}

if (canSign) {
    signing {
        sign publishing.publications.Release
    }
}

nexusPublishing {
    repositories.sonatype {
        username.set(getProjectProperty("ossrhUser"))
        password.set(getProjectProperty("ossrhPassword"))
        stagingProfileId.set(getProjectProperty("stagingProfileId"))
    }

    // Sonatype is very slow :)
    connectTimeout.set(Duration.ofMinutes(1))
    clientTimeout.set(Duration.ofMinutes(10))

    transitionCheckOptions {
        maxRetries.set(100)
        delayBetween.set(Duration.ofSeconds(5))
    }
}

subprojects {
    initializeSonatypeStagingRepository {
        mustRunAfter(tasks.withType(Sign))
    }

    tasks.withType(Sign) {
        enabled = canSign
    }
}

// To publish run ./gradlew release

task release {
    afterEvaluate {
        // Collect all the publishing task which upload the archives to nexus staging
        def publishingTasks = [
            ":", ":api:", ":natives:"
        ].collect { it + "publishAllPublicationsToSonatypeRepository" }

        dependsOn(publishingTasks)

        // Make sure the close and release happens after uploading
        dependsOn(closeAndReleaseSonatypeStagingRepository)
        closeAndReleaseSonatypeStagingRepository.mustRunAfter(publishingTasks)
    }
}
